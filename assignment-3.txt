import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'To-Do App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color.fromARGB(255, 204, 201, 208)),
        useMaterial3: true,
        // debug
      ),
      debugShowCheckedModeBanner: false,
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _controller = TextEditingController();
  final List<TodoItem> _tasks = [];
  final List<String> data = List.generate(10, (index) => 'Item $index');

  void _addTask() {
    if (_controller.text.isNotEmpty) {
      setState(() {
        _tasks.add(TodoItem(_controller.text.trim(), false));
        _controller.clear();
      });
    }
  }

  void _completeTask(int index){
    setState(() {
      _tasks[index].isDone = !_tasks[index].isDone;
    });
    // return true;
  }

  void _removeTask(int index) {
    setState(() {
      _tasks.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {


    
    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(kToolbarHeight),
        child: AppBar(
          backgroundColor: const Color.fromARGB(255, 87, 88, 86).withOpacity(1), // Translucent black color
          title: const Text('Assignment # 3', style: TextStyle(color: Colors.white)),
          elevation: 0, // Remove shadow to make it float
        ),
      ),
      body: LayoutBuilder(
        builder: (context, constraints) {
          // Check if the screen is wide (landscape mode) or narrow (portrait mode)
          bool isLandscape = constraints.maxWidth > constraints.maxHeight;

          return GridView.builder(
            gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: isLandscape ? 2 : 1, // 2 columns in landscape, 1 column in portrait
            ),
            itemCount: data.length,
            itemBuilder: (context, index) {
        return Padding(
          padding: const EdgeInsets.all(8.0), // Add padding around each item
          child: Expanded(
            child: Container(
              child: TextField(
                decoration: InputDecoration(
                  labelText: 'Item ' + index.toString(),
                  border: OutlineInputBorder(),
                ),
              ),
            ),
          ),
        );
      },
          );
        }
      ));
  }
}
      class TodoItem{
  final String description;
   bool isDone;
  TodoItem(this.description,this.isDone); 

}
  
